<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AXZN CODER</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117;
            color: #e2e8f0;
            line-height: 1.6;
        }
        .pane {
            background-color: #161b22;
            border: 1px solid #30363d;
            border-radius: 0.75rem;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            height: 100%;
        }
        .pane-header {
            background-color: #21262d;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid #30363d;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .pane-content {
            flex-grow: 1;
            padding: 1rem;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        textarea {
            background-color: #0d1117;
            border: 1px solid #30363d;
            color: #e2e8f0;
            padding: 1rem;
            border-radius: 0.5rem;
            resize: none;
            flex-grow: 1;
        }
        iframe {
            background-color: white;
            border: none;
            border-radius: 0.5rem;
            flex-grow: 1;
        }
        .action-btn {
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            transition: background-color 0.2s;
        }
        .lock-btn { background-color: #f59e0b; color: white; }
        .lock-btn:hover { background-color: #d97706; }
        .copy-btn { background-color: #1d4ed8; color: white; }
        .copy-btn:hover { background-color: #1e40af; }
        .save-btn { background-color: #22c55e; color: white; }
        .save-btn:hover { background-color: #16a34a; }
        .generate-btn { background-color: #3b82f6; color: white; }
        .generate-btn:hover { background-color: #2563eb; }
        .load-btn { background-color: #3b82f6; color: white; }
        .load-btn:hover { background-color: #2563eb; }
        .delete-btn { background-color: #ef4444; color: white; }
        .delete-btn:hover { background-color: #dc2626; }

        @media (min-width: 1024px) {
            .three-pane-grid {
                grid-template-columns: repeat(3, 1fr);
                height: calc(100vh - 4rem);
            }
        }
    </style>
</head>
<body class="p-4 md:p-8">
    <div class="space-y-4 lg:space-y-0 lg:grid three-pane-grid gap-4">

        <div class="pane">
            <div class="pane-header">
                <h2 class="text-xl font-semibold">Workbench</h2>
                <div class="flex space-x-2">
                    <button class="action-btn lock-btn" data-pane="workbench" aria-label="Lock Workbench">Lock</button>
                    <button class="action-btn copy-btn" data-pane="workbench" aria-label="Copy Workbench content">Copy</button>
                </div>
            </div>
            <div class="pane-content">
                <textarea id="workbench-input" placeholder="Enter your prompt here..."></textarea>
            </div>
            <div class="p-4 border-t border-gray-700 flex justify-center">
                <button id="generate-btn" class="generate-btn font-bold py-2 px-6 rounded-lg w-full">Generate</button>
            </div>
        </div>

        <div class="pane">
            <div class="pane-header">
                <h2 class="text-xl font-semibold">Incubator</h2>
                <div class="flex space-x-2">
                    <button class="action-btn lock-btn" data-pane="incubator" aria-label="Lock Incubator">Lock</button>
                    <button class="action-btn copy-btn" data-pane="incubator" aria-label="Copy Incubator content">Copy</button>
                </div>
            </div>
            <div class="pane-content">
                <textarea id="incubator-code" placeholder="Generated code will appear here..." readonly></textarea>
            </div>
            <div class="p-4 border-t border-gray-700 flex justify-center space-x-2">
                <button id="save-btn" class="save-btn font-bold py-2 px-6 rounded-lg w-full">Save Session</button>
            </div>
        </div>

        <div class="pane">
            <div class="pane-header">
                <h2 class="text-xl font-semibold">Scope</h2>
                <div class="flex space-x-2">
                    <button class="action-btn lock-btn" data-pane="scope" aria-label="Lock Scope">Lock</button>
                    <button class="action-btn copy-btn" data-pane="scope" aria-label="Copy Scope content">Copy</button>
                </div>
            </div>
            <div class="pane-content">
                <iframe id="scope-preview" class="w-full h-full"></iframe>
            </div>
        </div>
    </div>

    <div class="container mx-auto mt-8">
        <div class="flex flex-col md:flex-row md:justify-between md:items-center mb-4">
            <h2 class="text-2xl font-bold text-white mb-2 md:mb-0">Saved Sessions</h2>
            <p id="user-id-display" class="text-sm text-gray-500 font-mono"></p>
        </div>
        <div id="sessions-container" class="space-y-4">
            <p class="text-center text-gray-500 italic">Loading sessions...</p>
        </div>
    </div>

    <div id="modal-backdrop" class="fixed inset-0 hidden items-center justify-center z-50 bg-gray-900 bg-opacity-75">
        <div id="modal-content" class="bg-gray-800 p-8 rounded-lg shadow-xl w-11/12 md:w-3/4 lg:w-1/2">
            <h3 id="modal-title" class="text-2xl font-bold mb-4 text-white"></h3>
            <div id="modal-body" class="mb-6 text-gray-300"></div>
            <div class="flex justify-end space-x-4">
                <button id="modal-cancel-btn" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors hidden">Cancel</button>
                <button id="modal-confirm-btn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors hidden">OK</button>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, doc, deleteDoc, onSnapshot, getDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        setLogLevel('debug');

        // --- Global Variables Provided by Canvas ---
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        let db;
        let auth;
        let userId = null;
        const apiModel = "gemini-2.5-flash-preview-05-20";
        const apiKey = "";

        // --- DOM Elements ---
        const workbenchInput = document.getElementById('workbench-input');
        const incubatorCode = document.getElementById('incubator-code');
        const scopePreview = document.getElementById('scope-preview');
        const generateBtn = document.getElementById('generate-btn');
        const saveBtn = document.getElementById('save-btn');
        const sessionsContainer = document.getElementById('sessions-container');
        const userIdDisplay = document.getElementById('user-id-display');

        // --- Modal Function (replaces alert/confirm) ---
        function showModal(title, message, confirmCallback = null) {
            const modalBackdrop = document.getElementById('modal-backdrop');
            const modalTitle = document.getElementById('modal-title');
            const modalBody = document.getElementById('modal-body');
            const modalConfirmBtn = document.getElementById('modal-confirm-btn');
            const modalCancelBtn = document.getElementById('modal-cancel-btn');

            modalTitle.innerText = title;
            modalBody.innerHTML = `<p>${message}</p>`;
            modalBackdrop.classList.remove('hidden');
            modalBackdrop.classList.add('flex');

            modalConfirmBtn.onclick = () => {
                if (confirmCallback) confirmCallback();
                hideModal();
            };
            modalCancelBtn.onclick = hideModal;

            if (confirmCallback) {
                modalConfirmBtn.innerText = 'Confirm';
                modalConfirmBtn.classList.remove('hidden');
                modalCancelBtn.classList.remove('hidden');
            } else {
                modalConfirmBtn.innerText = 'OK';
                modalConfirmBtn.classList.remove('hidden');
                modalCancelBtn.classList.add('hidden');
            }
        }

        function hideModal() {
            const modalBackdrop = document.getElementById('modal-backdrop');
            modalBackdrop.classList.add('hidden');
            modalBackdrop.classList.remove('flex');
        }

        // --- Firebase Initialization and Auth ---
        if (Object.keys(firebaseConfig).length > 0) {
            const app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);

            auth.onAuthStateChanged(async (user) => {
                if (user) {
                    userId = user.uid;
                    userIdDisplay.innerText = `User ID: ${userId}`;
                    initApp();
                } else {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Firebase authentication failed:", error);
                        showModal("Authentication Error", "Failed to sign in. Please refresh the page.");
                    }
                }
            });
        } else {
            console.error("Firebase config not available.");
            sessionsContainer.innerHTML = `<p class="text-center text-gray-500 italic">Firebase is not configured. Sessions will not be saved.</p>`;
            showModal("Configuration Error", "Firebase is not configured. Features will not be saved.");
        }

        // --- Main App Logic ---
        function initApp() {
            const sessionsCollectionPath = `artifacts/${appId}/users/${userId}/sessions`;

            // Listen for real-time changes to sessions
            onSnapshot(collection(db, sessionsCollectionPath), (querySnapshot) => {
                sessionsContainer.innerHTML = ''; // Clear existing sessions
                if (querySnapshot.empty) {
                    sessionsContainer.innerHTML = `<p class="text-center text-gray-500 italic">No saved sessions. Start by creating one above!</p>`;
                } else {
                    querySnapshot.forEach((doc) => {
                        const data = doc.data();
                        const sessionElement = document.createElement('div');
                        sessionElement.className = 'note-card bg-gray-800 p-4 rounded-lg flex justify-between items-center';
                        sessionElement.innerHTML = `
                            <p class="text-sm font-semibold">${data.title}</p>
                            <div class="flex space-x-2">
                                <button class="load-btn text-white px-3 py-1 rounded-md text-xs font-bold" data-id="${doc.id}">Load</button>
                                <button class="delete-btn text-white px-3 py-1 rounded-md text-xs font-bold" data-id="${doc.id}">Delete</button>
                            </div>
                        `;
                        sessionsContainer.appendChild(sessionElement);
                    });
                }
            }, (error) => {
                console.error("Error fetching sessions:", error);
                showModal("Error", "Failed to load saved sessions. Please try again.");
            });

            // Generate button click handler
            generateBtn.addEventListener('click', async () => {
                const prompt = workbenchInput.value.trim();
                if (!prompt) {
                    showModal("Invalid Prompt", "Please enter a prompt to generate code.");
                    return;
                }

                showModal("Generating...", "Please wait while the code is being generated.");

                try {
                    const fullPrompt = `Please generate a complete, single-file HTML program that fulfills the following request: "${prompt}". The code must be self-contained within a single file block.`;

                    const payload = {
                        contents: [{ parts: [{ text: fullPrompt }] }],
                        generationConfig: {
                             responseMimeType: "text/plain",
                        },
                    };

                    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${apiKey}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    // --- FIX FOR UNEXPECTED END OF INPUT ERROR ---
                    // Read the JSON data once.
                    const result = await response.json();

                    if (!response.ok) {
                        throw new Error(result.error.message || 'API call failed');
                    }
                    // --- END FIX ---

                    const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text || '';

                    // Regex to extract code from a markdown block
                    const codeMatch = generatedText.match(/```(html)?\n([\s\S]*?)```/);
                    let code = '';
                    if (codeMatch && codeMatch[2]) {
                        code = codeMatch[2].trim();
                    } else {
                        // If no markdown block is found, assume the entire text is the code
                        code = generatedText.trim();
                    }

                    incubatorCode.value = code;
                    updateScope();

                    hideModal();
                } catch (error) {
                    console.error("Generation error:", error);
                    showModal("Generation Failed", `An error occurred: ${error.message}`);
                }
            });

            // Save session button handler
            saveBtn.addEventListener('click', async () => {
                const prompt = workbenchInput.value.trim();
                const code = incubatorCode.value.trim();

                if (!prompt || !code) {
                    showModal("Cannot Save", "Both the Workbench and Incubator must have content to be saved.");
                    return;
                }

                const title = prompt.split('\n')[0].substring(0, 50); // Use first line as title

                try {
                    await addDoc(collection(db, sessionsCollectionPath), {
                        title: title,
                        prompt: prompt,
                        code: code,
                        timestamp: Date.now()
                    });
                    showModal("Success", "Session saved successfully!");
                } catch (error) {
                    console.error("Error saving session:", error);
                    showModal("Save Failed", "Failed to save the session.");
                }
            });

            // Handle sessions actions (load and delete)
            sessionsContainer.addEventListener('click', async (e) => {
                const button = e.target;
                const sessionId = button.dataset.id;

                if (button.classList.contains('load-btn')) {
                    const sessionDoc = doc(db, sessionsCollectionPath, sessionId);
                    const sessionSnapshot = await getDoc(sessionDoc);
                    if (sessionSnapshot.exists()) {
                        const data = sessionSnapshot.data();
                        workbenchInput.value = data.prompt;
                        incubatorCode.value = data.code;
                        updateScope();
                        showModal("Session Loaded", `"${data.title}" has been loaded into your workbench.`);
                    }
                } else if (button.classList.contains('delete-btn')) {
                    showModal(
                        "Delete Session",
                        "Are you sure you want to delete this session? This action cannot be undone.",
                        async () => {
                            try {
                                await deleteDoc(doc(db, sessionsCollectionPath, sessionId));
                                showModal("Deleted", "Session deleted successfully.");
                            } catch (error) {
                                console.error("Error deleting session:", error);
                                showModal("Delete Failed", "Failed to delete session.");
                            }
                        }
                    );
                }
            });

            // Helper to update the iframe preview
            function updateScope() {
                const code = incubatorCode.value;
                scopePreview.srcdoc = code;
            }

            // --- Lock/Copy Logic ---
            document.querySelectorAll('.action-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const pane = e.target.dataset.pane;
                    const targetId = pane + (pane === 'workbench' ? '-input' : (pane === 'incubator' ? '-code' : '-preview'));
                    const target = document.getElementById(targetId);

                    if (e.target.classList.contains('lock-btn')) {
                        if (pane === 'scope') {
                            const isLocked = target.style.pointerEvents === 'none';
                            target.style.pointerEvents = isLocked ? 'auto' : 'none';
                            e.target.textContent = isLocked ? 'Lock' : 'Unlock';
                        } else {
                            const isDisabled = target.disabled;
                            target.disabled = !isDisabled;
                            e.target.textContent = isDisabled ? 'Lock' : 'Unlock';
                        }
                    } else if (e.target.classList.contains('copy-btn')) {
                        const textToCopy = (pane === 'scope') ? target.srcdoc : target.value;
                        navigator.clipboard.writeText(textToCopy).then(() => {
                            showModal("Copied", `Content from ${pane} copied to clipboard!`);
                        }).catch(err => {
                            console.error('Failed to copy text: ', err);
                            showModal("Copy Failed", "Failed to copy content. Please try again.");
                        });
                    }
                });
            });
        }
    </script>
</body>
</html> 
